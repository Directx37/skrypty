- name: Stopniowy restart Redis z walidacją certyfikatu
  hosts: all
  serial: 1
  become: true

  vars:
    cert_path: "/app/redis/keys/{{ inventory_hostname }}.crt"

  tasks:

    - name: Pobierz timestamp daty ważności certyfikatu (przed)
      shell: "date -d \"$(openssl x509 -enddate -noout -in {{ cert_path }} | cut -d= -f2)\" +%s"
      register: cert_expiry_ts_before
      failed_when: false
      changed_when: false

    - name: Pobierz timestamp daty +1 rok (teraz + 365 dni)
      shell: "date -d '+365 days' +%s"
      register: one_year_from_now_ts

    - name: Sprawdź czy certyfikat wygasa w ciągu roku
      set_fact:
        cert_needs_renewal: "{{ cert_expiry_ts_before.stdout | int < one_year_from_now_ts.stdout | int }}"

    - name: Odnów certyfikat jeśli wygasa w ciągu roku
      shell: "/app/scripts/renew_redis_cert.sh"
      when: cert_needs_renewal

    - name: Pobierz timestamp daty ważności certyfikatu (po odnowieniu)
      shell: "date -d \"$(openssl x509 -enddate -noout -in {{ cert_path }} | cut -d= -f2)\" +%s"
      register: cert_expiry_ts_after
      when: cert_needs_renewal

    - name: Sprawdź czy certyfikat został poprawnie odnowiony
      fail:
        msg: "❌ Certyfikat nie został odnowiony — daty są takie same!"
      when: cert_needs_renewal and (cert_expiry_ts_before.stdout | int == cert_expiry_ts_after.stdout | int)

    - name: Restart Redis (jeśli certyfikat był odnowiony)
      ansible.builtin.systemd:
        name: redis
        state: restarted
      when: cert_needs_renewal

    - name: Poczekaj 10 sekund po restarcie (jeśli był)
      ansible.builtin.pause:
        seconds: 10
      when: cert_needs_renewal

    - name: Sprawdź status Redis
      command: systemctl is-active redis
      register: redis_status

    - name: Pokaż status Redis
      debug:
        msg: "✅ Redis status na {{ inventory_hostname }}: {{ redis_status.stdout }}"
